#!/usr/bin/env python
import os
import sys
import click

# Add the parent directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


from .parser import create_parser, ModelTransformer
from .code_generator import generate_code


@click.group()
def cli():
    """Neural CLI: A compiler-like interface for .neural and .nr files."""
    pass

@cli.command()
@click.argument('file', type=click.Path(exists=True))
@click.option('--backend', default='tensorflow', help='Target backend: tensorflow or pytorch')
def compile(file, backend):
    """
    Compile a .neural or .nr file into an executable Python script.
    
    Example:
        neural compile my_model.neural --backend pytorch
    """
    ext = os.path.splitext(file)[1].lower()
    # Choose the appropriate start rule based on extension
    if ext in ['.neural', '.nr']:
        parser_instance = create_parser('network')
    elif ext == '.rnr':
        parser_instance = create_parser('research')
    else:
        click.echo(f"Unsupported file type: {ext}")
        sys.exit(1)

    with open(file, 'r') as f:
        content = f.read()
    
    try:
        tree = parser_instance.parse(content)
    except Exception as e:
        click.echo(f"Error parsing {file}: {e}")
        sys.exit(1)

    transformer = ModelTransformer()
    try:
        model_data = transformer.transform(tree)
    except Exception as e:
        click.echo(f"Error transforming {file}: {e}")
        sys.exit(1)

    code = generate_code(model_data, backend)
    output_file = os.path.splitext(file)[0] + f"_{backend}.py"
    with open(output_file, 'w') as f:
        f.write(code)
    click.echo(f"Compiled {file} to {output_file} for backend {backend}")

@cli.command()
@click.argument('file', type=click.Path(exists=True))
def run(file):
    """
    Run an executable neural model.
    
    Example:
        neural run my_model_pytorch.py
    """
    # Here, we assume that the file is a Python file generated by the compile command.
    os.system(f"python {file}")

if __name__ == '__main__':
    cli()
