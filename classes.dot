digraph "classes" {
rankdir=BT
charset="utf-8"
"neural.parser.parser.DSLValidationError" [color="black", fontcolor="red", label=<{DSLValidationError|column : NoneType<br ALIGN="LEFT"/>line : NoneType<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>severity : ERROR<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"neural.hpo.hpo.DynamicPTModel" [color="black", fontcolor="black", label=<{DynamicPTModel|layers : ModuleList<br ALIGN="LEFT"/>model_dict<br ALIGN="LEFT"/>shape_propagator<br ALIGN="LEFT"/>|forward(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.hpo.hpo.DynamicTFModel" [color="black", fontcolor="black", label=<{DynamicTFModel|layers_list : list<br ALIGN="LEFT"/>|call(inputs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.pretrained_models.pretrained.FusedConvBNLayer" [color="black", fontcolor="black", label=<{FusedConvBNLayer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"neural.pretrained_models.pretrained.ModelOptimizer" [color="black", fontcolor="black", label=<{ModelOptimizer|model<br ALIGN="LEFT"/>optimizations : dict<br ALIGN="LEFT"/>|apply()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.parser.parser.ModelTransformer" [color="black", fontcolor="black", label=<{ModelTransformer|current_macro : NoneType<br ALIGN="LEFT"/>hpo_params : list<br ALIGN="LEFT"/>layer_type_map : dict<br ALIGN="LEFT"/>macros : dict<br ALIGN="LEFT"/>variables : dict<br ALIGN="LEFT"/>|accuracy_param(items)<br ALIGN="LEFT"/>activation(items)<br ALIGN="LEFT"/>activation_param(items)<br ALIGN="LEFT"/>activity_regularization(items)<br ALIGN="LEFT"/>adaptive_average_pooling1d(items)<br ALIGN="LEFT"/>adaptive_average_pooling2d(items)<br ALIGN="LEFT"/>adaptive_average_pooling3d(items)<br ALIGN="LEFT"/>adaptive_max_pooling1d(items)<br ALIGN="LEFT"/>adaptive_max_pooling2d(items)<br ALIGN="LEFT"/>adaptive_max_pooling3d(items)<br ALIGN="LEFT"/>add(items)<br ALIGN="LEFT"/>advanced_layer(items)<br ALIGN="LEFT"/>alpha_dropout(items)<br ALIGN="LEFT"/>attention(items)<br ALIGN="LEFT"/>average(items)<br ALIGN="LEFT"/>average_pooling1d(items)<br ALIGN="LEFT"/>average_pooling2d(items)<br ALIGN="LEFT"/>average_pooling3d(items)<br ALIGN="LEFT"/>basic_layer(items)<br ALIGN="LEFT"/>batch_norm(items)<br ALIGN="LEFT"/>batch_normalization(items)<br ALIGN="LEFT"/>batch_size_param(items)<br ALIGN="LEFT"/>bidirectional_gru_layer(items)<br ALIGN="LEFT"/>bidirectional_lstm_layer(items)<br ALIGN="LEFT"/>bidirectional_rnn(items)<br ALIGN="LEFT"/>bidirectional_simple_rnn_layer(items)<br ALIGN="LEFT"/>bool_value(items)<br ALIGN="LEFT"/>capsule(items)<br ALIGN="LEFT"/>concatenate(items)<br ALIGN="LEFT"/>conv(items)<br ALIGN="LEFT"/>conv1d(items)<br ALIGN="LEFT"/>conv1d_transpose(items)<br ALIGN="LEFT"/>conv2d(items)<br ALIGN="LEFT"/>conv2d_transpose(items)<br ALIGN="LEFT"/>conv3d(items)<br ALIGN="LEFT"/>conv3d_transpose(items)<br ALIGN="LEFT"/>conv_gru(items)<br ALIGN="LEFT"/>conv_gru_layer(items)<br ALIGN="LEFT"/>conv_lstm(items)<br ALIGN="LEFT"/>conv_lstm_layer(items)<br ALIGN="LEFT"/>cudnn_gru_layer(items)<br ALIGN="LEFT"/>custom(items)<br ALIGN="LEFT"/>define(items)<br ALIGN="LEFT"/>dense(items)<br ALIGN="LEFT"/>depthwise_conv2d(items)<br ALIGN="LEFT"/>device_param(items)<br ALIGN="LEFT"/>device_spec(items)<br ALIGN="LEFT"/>dot(items)<br ALIGN="LEFT"/>dropout(items)<br ALIGN="LEFT"/>dynamic(items)<br ALIGN="LEFT"/>embedding(items)<br ALIGN="LEFT"/>epochs_param(items)<br ALIGN="LEFT"/>execution_config(items)<br ALIGN="LEFT"/>explicit_tuple(items)<br ALIGN="LEFT"/>flatten(items)<br ALIGN="LEFT"/>gaussian_dropout(items)<br ALIGN="LEFT"/>gaussian_noise(items)<br ALIGN="LEFT"/>global_average_pooling1d(items)<br ALIGN="LEFT"/>global_average_pooling2d(items)<br ALIGN="LEFT"/>global_average_pooling3d(items)<br ALIGN="LEFT"/>global_max_pooling1d(items)<br ALIGN="LEFT"/>global_max_pooling2d(items)<br ALIGN="LEFT"/>global_max_pooling3d(items)<br ALIGN="LEFT"/>graph(items)<br ALIGN="LEFT"/>graph_attention(items)<br ALIGN="LEFT"/>graph_conv(items)<br ALIGN="LEFT"/>group_norm(items)<br ALIGN="LEFT"/>group_normalization(items)<br ALIGN="LEFT"/>groups_param(items)<br ALIGN="LEFT"/>gru(items)<br ALIGN="LEFT"/>gru_dropout(items)<br ALIGN="LEFT"/>grucell(items)<br ALIGN="LEFT"/>hpo_choice(items)<br ALIGN="LEFT"/>hpo_expr(items)<br ALIGN="LEFT"/>hpo_log_range(items)<br ALIGN="LEFT"/>hpo_range(items)<br ALIGN="LEFT"/>hpo_with_params(items)<br ALIGN="LEFT"/>inception(items)<br ALIGN="LEFT"/>input_layer(items)<br ALIGN="LEFT"/>instance_norm(items)<br ALIGN="LEFT"/>instance_normalization(items)<br ALIGN="LEFT"/>l1_l2(items)<br ALIGN="LEFT"/>lambda_(items)<br ALIGN="LEFT"/>layer_block(items)<br ALIGN="LEFT"/>layer_choice(items)<br ALIGN="LEFT"/>layer_norm(items)<br ALIGN="LEFT"/>layer_normalization(items)<br ALIGN="LEFT"/>layer_or_repeated(items)<br ALIGN="LEFT"/>layers(items)<br ALIGN="LEFT"/>learning_rate_param(items)<br ALIGN="LEFT"/>loss(items)<br ALIGN="LEFT"/>lr_schedule(items)<br ALIGN="LEFT"/>lr_schedule_arg(items)<br ALIGN="LEFT"/>lr_schedule_args(items)<br ALIGN="LEFT"/>lstm(items)<br ALIGN="LEFT"/>lstm_dropout(items)<br ALIGN="LEFT"/>lstmcell(items)<br ALIGN="LEFT"/>macro_ref(items)<br ALIGN="LEFT"/>max_pooling(items)<br ALIGN="LEFT"/>maximum(items)<br ALIGN="LEFT"/>maxpooling1d(items)<br ALIGN="LEFT"/>maxpooling2d(items)<br ALIGN="LEFT"/>maxpooling3d(items)<br ALIGN="LEFT"/>merge(items)<br ALIGN="LEFT"/>metrics(items)<br ALIGN="LEFT"/>metrics_loss_param(items)<br ALIGN="LEFT"/>momentum_param(items)<br ALIGN="LEFT"/>multiply(items)<br ALIGN="LEFT"/>named_activation(items)<br ALIGN="LEFT"/>named_alpha(items)<br ALIGN="LEFT"/>named_dilation_rate(items)<br ALIGN="LEFT"/>named_dropout(items)<br ALIGN="LEFT"/>named_ff_dim(items)<br ALIGN="LEFT"/>named_filters(items)<br ALIGN="LEFT"/>named_float(items)<br ALIGN="LEFT"/>named_groups(items)<br ALIGN="LEFT"/>named_input_dim(items)<br ALIGN="LEFT"/>named_int(items)<br ALIGN="LEFT"/>named_kernel_size(items)<br ALIGN="LEFT"/>named_layer(items)<br ALIGN="LEFT"/>named_momentum(items)<br ALIGN="LEFT"/>named_num_heads(items)<br ALIGN="LEFT"/>named_optimizer(items)<br ALIGN="LEFT"/>named_output_dim(items)<br ALIGN="LEFT"/>named_padding(items)<br ALIGN="LEFT"/>named_param(items)<br ALIGN="LEFT"/>named_params(items)<br ALIGN="LEFT"/>named_rate(items)<br ALIGN="LEFT"/>named_return_sequences(items)<br ALIGN="LEFT"/>named_size(items)<br ALIGN="LEFT"/>named_strides(items)<br ALIGN="LEFT"/>named_string(items)<br ALIGN="LEFT"/>named_units(items)<br ALIGN="LEFT"/>network(items)<br ALIGN="LEFT"/>noise_layer(items)<br ALIGN="LEFT"/>norm_layer(items)<br ALIGN="LEFT"/>normalization_layer(items)<br ALIGN="LEFT"/>number(items)<br ALIGN="LEFT"/>number_or_none(items)<br ALIGN="LEFT"/>optimizer_param(items)<br ALIGN="LEFT"/>output(items)<br ALIGN="LEFT"/>paper_param(items)<br ALIGN="LEFT"/>param(items)<br ALIGN="LEFT"/>params(items)<br ALIGN="LEFT"/>parse_network(config: str, framework: str)<br ALIGN="LEFT"/>parse_network_with_hpo(config)<br ALIGN="LEFT"/>pool_size(items)<br ALIGN="LEFT"/>pooling(items)<br ALIGN="LEFT"/>precision_param(items)<br ALIGN="LEFT"/>quantum(items)<br ALIGN="LEFT"/>raise_validation_error(msg, item, severity)<br ALIGN="LEFT"/>rate(items)<br ALIGN="LEFT"/>recall_param(items)<br ALIGN="LEFT"/>references(items)<br ALIGN="LEFT"/>regularization(items)<br ALIGN="LEFT"/>regularization_layer(items)<br ALIGN="LEFT"/>research(items)<br ALIGN="LEFT"/>research_params(items)<br ALIGN="LEFT"/>residual(items)<br ALIGN="LEFT"/>rnn_cell_layer(items)<br ALIGN="LEFT"/>schedule(items)<br ALIGN="LEFT"/>search_method_param(items)<br ALIGN="LEFT"/>self_defined_shape(items)<br ALIGN="LEFT"/>separable_conv2d(items)<br ALIGN="LEFT"/>shape(items)<br ALIGN="LEFT"/>simple_float(items)<br ALIGN="LEFT"/>simple_number(items)<br ALIGN="LEFT"/>simple_rnn_cell(items)<br ALIGN="LEFT"/>simple_rnn_dropout(items)<br ALIGN="LEFT"/>simplernn(items)<br ALIGN="LEFT"/>spatial_dropout1d(items)<br ALIGN="LEFT"/>spatial_dropout2d(items)<br ALIGN="LEFT"/>spatial_dropout3d(items)<br ALIGN="LEFT"/>special_layer(items)<br ALIGN="LEFT"/>squeeze_excitation(items)<br ALIGN="LEFT"/>stddev(items)<br ALIGN="LEFT"/>substract(items)<br ALIGN="LEFT"/>timedistributed(items)<br ALIGN="LEFT"/>training_config(items)<br ALIGN="LEFT"/>training_params(items)<br ALIGN="LEFT"/>transformer(items)<br ALIGN="LEFT"/>validation_split_param(items)<br ALIGN="LEFT"/>value(items)<br ALIGN="LEFT"/>values_list(items)<br ALIGN="LEFT"/>wrapper(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.neural_chat.neural_chat.NeuralChat" [color="black", fontcolor="black", label=<{NeuralChat|backend : str<br ALIGN="LEFT"/>config : str<br ALIGN="LEFT"/>parser : Lark<br ALIGN="LEFT"/>transformer<br ALIGN="LEFT"/>|process_command(command: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.pretrained_models.pretrained.OptimizedModel" [color="black", fontcolor="black", label=<{OptimizedModel|layers<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"neural.shape_propagation.shape_propagator.PerformanceMonitor" [color="black", fontcolor="black", label=<{PerformanceMonitor|resource_history : list<br ALIGN="LEFT"/>|monitor_resources()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.pretrained_models.pretrained.PretrainedModelHub" [color="black", fontcolor="black", label=<{PretrainedModelHub|model_db : dict<br ALIGN="LEFT"/>|load(model_name: str, pretrained: bool): Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.parser.parser.Severity" [color="black", fontcolor="black", label=<{Severity|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"neural.training.training.ShapePropagator" [color="black", fontcolor="black", label=<{ShapePropagator|tensorboard_logger<br ALIGN="LEFT"/>|propagate(input_shape, layer, framework)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.shape_propagation.shape_propagator.ShapePropagator" [color="black", fontcolor="black", label=<{ShapePropagator|current_layer : int<br ALIGN="LEFT"/>debug : bool<br ALIGN="LEFT"/>dot<br ALIGN="LEFT"/>execution_trace : list<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>layer_connections : list<br ALIGN="LEFT"/>param_aliases : dict<br ALIGN="LEFT"/>performance_monitor<br ALIGN="LEFT"/>shape_history : list<br ALIGN="LEFT"/>|generate_report()<br ALIGN="LEFT"/>get_trace()<br ALIGN="LEFT"/>load_pretrained(model_name, pretrained)<br ALIGN="LEFT"/>propagate(input_shape: Tuple[Optional[int], ...], layer: Dict[str, Any], framework: str): Tuple[Optional[int], ...]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.shape_propagation.shape_propagator.ShapeValidator" [color="black", fontcolor="black", label=<{ShapeValidator|<br ALIGN="LEFT"/>|validate_layer(layer_type, input_shape, params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.training.training.TensorBoardLogger" [color="black", fontcolor="black", label=<{TensorBoardLogger|writer : SummaryWriter<br ALIGN="LEFT"/>|log_metrics(metrics, step)<br ALIGN="LEFT"/>log_model(model, step)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.pretrained_models.pretrained.TritonConv2D" [color="black", fontcolor="black", label=<{TritonConv2D|<br ALIGN="LEFT"/>|backward(ctx, grad_output)<br ALIGN="LEFT"/>forward(ctx, input, weight, bias, stride, padding, dilation)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"neural.parser.parser.ModelTransformer" -> "neural.neural_chat.neural_chat.NeuralChat" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transformer", style="solid"];
"neural.shape_propagation.shape_propagator.PerformanceMonitor" -> "neural.shape_propagation.shape_propagator.ShapePropagator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="performance_monitor", style="solid"];
"neural.shape_propagation.shape_propagator.ShapePropagator" -> "neural.hpo.hpo.DynamicPTModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape_propagator", style="solid"];
"neural.training.training.TensorBoardLogger" -> "neural.training.training.ShapePropagator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tensorboard_logger", style="solid"];
}
